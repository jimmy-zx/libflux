import pathlib
import urllib.request

BASE = pathlib.Path(".")

IGNORE_FILES = {
    ".": [
        "Python.gitignore",
        "C.gitignore",
    ]
}


def check_dir() -> None:
    if BASE.resolve().name != "libflux":
        raise FileNotFoundError("This script must invoked at the project root")


def preprocess_ignore(ignore_file: bytes) -> bytes:
    return (
        "\n".join(
            line for line in ignore_file.decode().split("\n") if line != ".envrc"
        ).encode()
    )


def download_ignore(files: set[str]) -> dict[str, bytes]:
    url = "https://raw.githubusercontent.com/github/gitignore/refs/heads/main/{}"
    contents: dict[str, bytes] = {}
    for file in files:
        with urllib.request.urlopen(url.format(file)) as response:
            contents[file] = preprocess_ignore(response.read())
    return contents


def main():
    check_dir()
    files = set()
    for _, ignores in IGNORE_FILES.items():
        files = files.union(ignores)
    contents = download_ignore(files)
    for path, ignores in IGNORE_FILES.items():
        with open(BASE / path / ".gitignore", "wb") as fp:
            fp.write(b"## generated by update_ignore.py\n\n")
            for ignore in ignores:
                fp.write(
                    b"### include "
                    + ignore.encode()
                    + b"\n\n"
                    + contents[ignore]
                    + b"\n"
                )
            fp.write(b"compile_commands.json\n## end of ignore")


if __name__ == "__main__":
    main()
